# Multi-stage build for CodeAgent Sandbox
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS dotnet-base

FROM node:20-slim AS node-base

FROM python:3.11-slim AS python-base

# Final sandbox image
FROM ubuntu:22.04

# Install essential tools and runtimes
RUN apt-get update && apt-get install -y \
    # Basic tools
    curl \
    wget \
    git \
    vim \
    nano \
    build-essential \
    # Process management
    procps \
    htop \
    # Network tools (for debugging)
    net-tools \
    iputils-ping \
    # Certificate handling
    ca-certificates \
    # Required for various package managers
    apt-transport-https \
    gnupg \
    lsb-release \
    && rm -rf /var/lib/apt/lists/*

# Copy .NET SDK from dotnet-base
COPY --from=dotnet-base /usr/share/dotnet /usr/share/dotnet
ENV PATH="/usr/share/dotnet:${PATH}"
ENV DOTNET_ROOT=/usr/share/dotnet

# Copy Node.js from node-base
COPY --from=node-base /usr/local/bin /usr/local/bin
COPY --from=node-base /usr/local/lib/node_modules /usr/local/lib/node_modules
ENV NODE_PATH=/usr/local/lib/node_modules

# Install Python and pip
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-venv \
    && ln -s /usr/bin/python3 /usr/bin/python \
    && rm -rf /var/lib/apt/lists/*

# Install additional development tools
RUN apt-get update && apt-get install -y \
    # Java (for some agents)
    openjdk-17-jdk-headless \
    # Docker CLI (for Docker-in-Docker scenarios)
    docker.io \
    # Database clients
    postgresql-client \
    mysql-client \
    redis-tools \
    && rm -rf /var/lib/apt/lists/*

# Install common Node.js global packages
RUN npm install -g \
    typescript \
    @angular/cli \
    create-react-app \
    vue \
    webpack \
    webpack-cli \
    pm2

# Install common Python packages
RUN pip3 install --no-cache-dir \
    requests \
    flask \
    django \
    fastapi \
    uvicorn \
    pytest \
    black \
    pylint

# Create workspace directory
RUN mkdir -p /workspace && \
    chmod 777 /workspace

# Create agent user (non-root execution)
RUN useradd -m -s /bin/bash -u 1000 agent && \
    chown -R agent:agent /workspace

# Install MCP server placeholder
# This will be replaced with actual MCP server when available
RUN echo '#!/bin/bash\necho "MCP Server v1.0.0"' > /usr/local/bin/mcp-server && \
    chmod +x /usr/local/bin/mcp-server

# Install coding agent CLI placeholder
# This will be replaced with actual agent CLI
RUN echo '#!/bin/bash\necho "CodeAgent CLI v1.0.0"' > /usr/local/bin/codeagent && \
    chmod +x /usr/local/bin/codeagent

# Set working directory
WORKDIR /workspace

# Switch to non-root user by default
USER agent

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD echo "Sandbox is healthy" || exit 1

# Default command (can be overridden)
CMD ["/bin/bash"]